At the end of each sprint, each of us demonstrate accomplishments.
These reviews often incorporate the following trifecta:

  * Presentations explaining the technology and other frobnications
  * Source code, correctly highlighted and perhaps interactive
  * Executing the code, preferably in a shell to maintain nerd cred

During my sprint reviews, I noticed I used my org-mode-formatted
files, eshell and source code buffers... always in Emacs.
However, fat-fingering or mentally burping delayed the
gratification for my audience while I laboriously typed.
I solved this problem by predefining each "step" as an Emacs Lisp
function, and had another function execute each /step function/ when I
hit an /advance/ key (=F12=).

After I had amassed a small army of /helper functions/, I packaged it as
=demo-it=, because I lack the imagination to come up with anything more
clever.

See the following videos as examples of what can be done:

  * [[http://www.youtube.com/watch?v=B6jfrrwR10k][Emacs: An Introduction for the Curious]]
  * [[https://www.youtube.com/watch?v=dljNabciEGg][Literate DevOps Programming]]
  * [[https://www.youtube.com/watch?v=_l1oj5CEh7k][Learn You Some Lisp for Great Good]]

Click the following image for a quicker example:

#+HTML: <a href="http://www.youtube.com/watch?v=TSprQzowhAQ"><img src="http://img.youtube.com/vi/TSprQzowhAQ/0.jpg" alt="Example and Demonstration"/></a>

Using this project is a four step process:

  1. Load the library in your own Elisp source code file
  2. Create zero or more helper functions that "do things", or use the
     functions provided by this project.
  3. Order the functions by calling =(demo-it-create step-1 step-2 ...)=
  4. Call =demo-it-start= to kick off the fun.

Press space for each step, or call =demo-it-end= to end earlier.

For instance:

#+BEGIN_SRC elisp
  (require 'demo-it)   ;; Load this library of functions

  (defun my-demo-step/show-code ()
    "Helper demo function that displays some source code and
  advances the presentation at one time."
    (demo-it-load-side-window "example/example.py")
    (demo-it-presentation-advance))

  ;; Order the functions and forms for this presentation:
  (demo-it-create (demo-it-presentation "example/example.org")
                   my-demo-step/show-code
                   demo-it-presentation-return ; close file and advance
                  (demo-it-run-in-eshell "python example/example.py"))

  (demo-it-start)
#+END_SRC

Each "step" given to =demo-it-create= can be one of the following:

  - an expression typically calling a helper function
  - a name of a function to call that does multiple actions
  - a string referring to a key-binding to run
  - a property that affects demonstration behavior

This package has a collection of helping functions, that can either be
called directly as part of an expression, or embedded in a
demonstration /step function/. For a more complete example, see
[[file:example/example.el][example.el]] or the other examples in the [[file:example][example directory]].

Finally, read the [[file:demo-it.org][documentation]] (which is available as an Info manual).

* Historical Record

  The initial release, while published on MELPA, was rather an ad hoc
  collection of functions, poorly organized and barely documented.
  Sorry about that. I really didn't think any one would care enough to
  use it.

  *Version 2* of this project attempted to remedy those shortcomings,
  cleaning and standardizing the /interface/ of functions. Also included
  is the following features:

  - Simplification of a demonstration's construction. Originally
    each step essentially required a helper function, but now, we can
    specify full expressions directly into =demo-it-create=.

  - Default behavior is now based on customized preferences instead of
    hard-coded values. Functions still accept optional values to
    override those defaults. Also the =demo-it-create= macro accepts
    demo-level overrides of the customized preferences.

  - Described every function [[file:demo-it.org][both online]] and as an Info manual, with
    lots of examples for the step functions.

  *Version 3* is a plan to have each step more repeatable. Currently,
  each step assumes a state built by the previous steps, which makes
  developing, debugging, and reversing difficult.
